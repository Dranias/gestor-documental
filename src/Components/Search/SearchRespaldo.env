import './Search.css'

import React, { useState, useEffect } from 'react';
import { useSearch } from '../../SearchContext';
import { Grid } from '@mui/material';
import { saveAs } from 'file-saver';
import axios from 'axios';
import flechaDer from '../../assets/f-der.png';
import flechaizq from '../../assets/f-izq.png';
import butprint from '../../assets/imprimir.png';
import editar from '../../assets/editar-archivo.png';
import plantilla from '../../assets/ti.docx'
import PizZip from 'pizzip';
import Docxtemplater from 'docxtemplater';
import Snackbar from '@mui/material/Snackbar';
import MuiAlert from '@mui/material/Alert';

const Search = () => {
    const { searchResults } = useSearch();
    const [data, setData] = useState([]);
    const [lastIndex, setLastIndex] = useState(null);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [openSnackbar, setOpenSnackbar] = useState(false);

    useEffect(() => {
        // Aquí me debe traer todos los datos que se escribieron desde el search-box del navbar 
        // http://localhost:3000/data/search?query={TextodadoporelNavBar}

    }, []);

    useEffect(() => {
        setData(searchResults);
        setLastIndex(0);
    }, [searchResults]);

    const handleInputChange = (event) => {
        const query = event.target.value;
        // Llama a la función de devolución de llamada con la consulta
        searchDataCallback(query);
    };

    const Alert = React.forwardRef(function Alert(props, ref) {
        return <MuiAlert elevation={6} ref={ref} variant="filled" {...props} />;
    });

    const handleCloseSnackbar = (event, reason) => {
        if (reason === 'clickaway') {
            return;
        }
        setOpenSnackbar(false);
    };

    const handlePrevClick = () => {
        if (currentIndex > 0) {
            setCurrentIndex((prevIndex) => prevIndex - 1);
        } else {
            // Muestra la Snackbar cuando alcanzas el límite hacia atrás
            setOpenSnackbar(true);
        }
    };

    const handleForwardClick = () => {
        if (currentIndex < data.length - 1) {
            setCurrentIndex((prevIndex) => prevIndex + 1);
        } else {
            // Muestra la Snackbar cuando alcanzas el límite
            setOpenSnackbar(true);
        }
    };

    /* Aquí imprime el ti.docx de la posición actual */
    const handleDownloadFile = async () => {
        try {
            const response = await axios.get(plantilla, {
                responseType: 'arraybuffer',
            });

            const content = new Uint8Array(response.data);
            const zip = new PizZip(content);
            let doc;
            const fechaFormateada = new Date(data[currentIndex].date).toLocaleDateString('es-ES');

            try {
                doc = new Docxtemplater(zip, { linebreaks: true });
            } catch (error) {
                console.error('Error al inicializar docxtemplater:', error);
                return;
            }

            doc.setData({
                Fecha: fechaFormateada,
                Hora: `${data[currentIndex].time} horas`,
                Nombre: data[currentIndex].name,
                NumDoc: Array.isArray(data[currentIndex].docNumber)
                    ? data[currentIndex].docNumber.map(doc => `OPG/${doc}/2024`).join(', ')
                    : `OPG/${data[currentIndex].docNumber}/2024`,
                SOLICITUD: data[currentIndex].description,
                DEPENDENCIA: Array.isArray(data[currentIndex].docNumber)
                    ? data[currentIndex].docNumber.map((doc, index) => `OPG/${doc}/2024: ${data[currentIndex].institution[index]}`).join('\n')
                    : `OPG/${data[currentIndex].docNumber}/2024: ${data[currentIndex].institution}`,
                FUNDAMENTO: data[currentIndex].legalBasis ? `III. FUNDAMENTO JURÍDICO\r\n${data[currentIndex].legalBasis}` : '',
                // OBSERVACIONES si no está vacío
                OBSERVACIONES: data[currentIndex].textareaObs ? `IV. OBSERVACIONES\r\n${data[currentIndex].textareaObs}` : '',
            });

            try {
                doc.render();
            } catch (error) {
                console.error('Error al renderizar la plantilla:', error);
                return;
            }

            const numDocNames = Array.isArray(data[currentIndex].docNumber)
                ? data[currentIndex].docNumber.join('-')
                : data[currentIndex].docNumber;

            const updatedContent = doc.getZip().generate({ type: 'blob' });
            saveAs(updatedContent, `ti-${numDocNames}.docx`);
        } catch (error) {
            console.error('Error al descargar el archivo:', error);
        }
    };

    const imprimir = () => {
        console.log(data);
    }

    return (
        <div>
            {imprimir()}
            {Array.isArray(data) && data.length > 0 ? (
                <div>
                    <div className="title">
                        <h1>Registros</h1>
                    </div>
                    <Grid container className='grid'>
                        <Grid item>
                            <h1>Folio: {data[currentIndex].folio}</h1>
                        </Grid>
                        <Grid item>
                            <h1>Hora: {data[currentIndex].time}</h1>
                        </Grid>
                        <Grid item>
                            <h1>Fecha: {new Date(data[currentIndex].date).toLocaleDateString()}</h1>
                        </Grid>
                        <Grid item>
                            <h1>Tema: {data[currentIndex].issue}</h1>
                        </Grid>

                        <Grid item xs={12} sx={{ textAlign: 'center' }}>
                            <h1>Nombre: </h1><br />
                            <div style={{ maxWidth: '65%', margin: '0 auto', textAlign: 'center', textJustify: 'inter-word' }}>
                                <p className="bigText">{data[currentIndex].name}</p>
                            </div>
                        </Grid>

                        {/* OPG y dependencia */}
                        <Grid item xs={12} sx={{ textAlign: 'center' }}>
                            <h1>Turno: </h1>
                        </Grid>

                        {Array.isArray(data[currentIndex].docNumber) ? (
                            <div style={{ textAlign: 'center' }}>
                                {data[currentIndex].docNumber.map((doc, docIndex) => (
                                    <div key={docIndex}>
                                        {data[currentIndex].institution[docIndex] && (
                                            <p className="bigText">
                                                OPG/{doc}/2024: {data[currentIndex].institution[docIndex]}
                                            </p>
                                        )}
                                        {docIndex < data[currentIndex].docNumber.length - 1 && <br />}
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <div style={{ textAlign: 'center' }}>
                                <p className="bigText">OPG/{data[currentIndex].docNumber}/2024: {data[currentIndex].institution}</p>
                            </div>
                        )}

                        {/* Descripción */}
                        <Grid item xs={12} sx={{ textAlign: 'center' }}>
                            <h1>Solicitud:</h1><br />
                            <div style={{ maxWidth: '65%', margin: '0 auto', textAlign: 'left', textJustify: 'inter-word' }}>
                                <p className="bigText">{data[currentIndex].description}</p>
                            </div>
                        </Grid>

                        {/* Fundamento jurídico */}
                        {data[currentIndex].legalBasis && (
                            <div>
                                <h1>Fundamento Jurídico: </h1>
                                <div style={{ maxWidth: '65%', margin: '0 auto', textAlign: 'left', textJustify: 'inter-word' }}>
                                    <p className="bigText">{data[currentIndex].legalBasis}</p>
                                </div>
                            </div>
                        )}

                        {/* Observaciones */}
                        {data[currentIndex].notes && (
                            <div>
                                <h1>Observaciones: </h1>
                                <div style={{ maxWidth: '65%', margin: '0 auto', textAlign: 'left', textJustify: 'inter-word' }}>
                                    <p className="bigText">{data[currentIndex].notes}</p>
                                </div>
                            </div>
                        )}
                    </Grid>
                </div>
            ) : (
                <p className="bigText">No se encontraron coincidencias en la búsqueda.</p>
            )}

            <Snackbar open={openSnackbar} autoHideDuration={1000} onClose={handleCloseSnackbar}>
                <Alert onClose={handleCloseSnackbar} severity="warning" sx={{ width: '100%' }}>
                    No hay más elementos en la lista
                </Alert>
            </Snackbar>

            <div className="container-datasend" style={{ marginTop: '20px' }}>
                <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                    <button style={{ width: '70px', height: '70px' }} onClick={handlePrevClick}>
                        <img src={flechaizq} alt="Flecha izquierda" style={{ height: '70%' }} />
                    </button>
                    <button style={{ width: '70px', height: '70px' }} onClick={handleDownloadFile}>
                        <img src={butprint} alt="Imprimir" style={{ height: '70%' }} />
                    </button>
                    <button style={{ width: '70px', height: '70px' }}>
                        <img src={editar} alt="Editar" style={{ height: '70%' }} />
                    </button >
                    <button style={{ width: '70px', height: '70px' }} onClick={handleForwardClick}>
                        <img src={flechaDer} alt="Flecha derecha" style={{ height: '70%' }} />
                    </button>
                </div>
            </div>
        </div >
    );
};

export default Search;
