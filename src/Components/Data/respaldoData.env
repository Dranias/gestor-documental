import React, { useState } from 'react';
import { temas, dependencias, customTheme, StyledToggleButtonGroup } from './Dataoptions';
import { TextField, Grid, Button } from '@mui/material';
import Autocomplete from '@mui/material/Autocomplete';
import { ThemeProvider, useTheme } from '@mui/material/styles';
import DeleteIcon from '@mui/icons-material/Delete';
import './Data.css';
import axios from 'axios';

import Accordion from '@mui/material/Accordion';
import AccordionSummary from '@mui/material/AccordionSummary';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import Typography from '@mui/material/Typography';
import AccordionDetails from '@mui/material/AccordionDetails';
import FormatAlignLeftIcon from '@mui/icons-material/FormatAlignLeft';
import FormatAlignCenterIcon from '@mui/icons-material/FormatAlignCenter';
import FormatAlignRightIcon from '@mui/icons-material/FormatAlignRight';
import FormatAlignJustifyIcon from '@mui/icons-material/FormatAlignJustify';
import FormatBoldIcon from '@mui/icons-material/FormatBold';
import FormatItalicIcon from '@mui/icons-material/FormatItalic';
import FormatUnderlinedIcon from '@mui/icons-material/FormatUnderlined';
import FormatColorFillIcon from '@mui/icons-material/FormatColorFill';
import ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';
import Divider from '@mui/material/Divider';
import Paper from '@mui/material/Paper';
import ToggleButton from '@mui/material/ToggleButton';
import TextareaAutosize from '@mui/material/TextareaAutosize';

import { DemoContainer } from '@mui/x-date-pickers/internals/demo';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { useNavigate } from 'react-router-dom';
import Snackbar from '@mui/material/Snackbar';
import MuiAlert from '@mui/material/Alert';

import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogContentText from '@mui/material/DialogContentText';
import DialogTitle from '@mui/material/DialogTitle';

const Data = () => {

  const outerTheme = useTheme();
  const [folioValue, setFolioValue] = useState('');
  const [timeValue, settimeValue] = useState('');
  const [selectedDate, setSelectedDate] = useState(null);
  const [selectedissue, setSelectedissue] = useState(null);
  const [selectedInstitution, setSelectedInstitution] = useState(null);
  const [nameValue, setNameValue] = useState('');
  const [OPGs, setOPGs] = useState([]);
  const [dependenciesarray, setDependenciesarray] = useState([]);
  const [errorSnackbarOpen, setErrorSnackbarOpen] = React.useState(false);
  const [openDialogs, setOpenDialog] = React.useState(false);
  const navigate = useNavigate();
  let contador = 0;


  //Repetir la sección OPG-Dependencia
  const handleButtonClick = () => {
    contador++;
    const newSection = (
      <div className='container-opg' key={sections.length}>
        <h1>OPG/</h1>
        <TextField
          id={`outlined-basic-${sections.length}`}
          label="OPG"
          variant="outlined"
          style={{ width: '70px' }}
          onChange={(e) => handleOpgChange(contador, e.target.value)}
        />
        <h1>/2024</h1>
        <h1>Dependencia: </h1>
        <div style={{ display: 'flex', alignItems: 'center', width: '800px' }}>
          <Autocomplete
            disablePortal
            id="combo-box-demo"
            options={dependencias}
            freeSolo
            sx={{ width: 600 }}
            renderInput={(params) => <TextField {...params} label="Dependencia de Turno" />}
            onChange={(event, newValue) => {
              setSelectedInstitution(newValue); // Cambiar el valor seleccionado
              handleDependenciaChange(contador, newValue); // Llamar a tu función con el índice y el nuevo valor
            }}
          />
          <Button variant='contained' onClick={handleButtonClick} style={{ backgroundColor: '#691C32', color: 'white' }}>+</Button>
          {sections.length > 0 && (
            <Button variant='contained' onClick={() => handleRemoveButtonClick(sections.length - 1)} style={{ backgroundColor: '#A6A6A8', color: 'white' }}>-</Button>
          )}
        </div>
      </div>
    );
    setSections(prevSections => {
      const updatedSections = [...prevSections, newSection];
      return updatedSections;
    });

  };

  //Sección OPG-Dependencia Original
  const [sections, setSections] = useState([
    (
      <div className='container-opg' key={0}>
        <h1>OPG/</h1>
        <TextField
          id={`outlined-basic-${0}`}
          label="OPG"
          variant="outlined"
          style={{ width: '70px' }}
          onChange={(e) => handleOpgChange(0, e.target.value)}
        />
        <h1>/2024</h1>
        <h1>Dependencia: </h1>
        <div style={{ display: 'flex', alignItems: 'center', width: '800px' }}>
          <Autocomplete
            disablePortal
            id="combo-box-demo"
            options={dependencias}
            freeSolo
            sx={{ width: 600 }}
            renderInput={(params) => <TextField {...params} label="Dependencia de Turno" />}
            onChange={(event, newValue) => {
              setSelectedInstitution(newValue); // Cambiar el valor seleccionado
              handleDependenciaChange(0, newValue); // Llamar función con el índice y el nuevo valor
            }}
          />
          <Button variant='contained' onClick={handleButtonClick} style={{ backgroundColor: '#691C32', color: 'white' }}>+</Button>
        </div>
      </div>
    ),
  ]);

  const handleConfirmIssue = () => {
    if (selectedissue && typeof selectedissue !== 'object') {
      const newIssue = { label: selectedissue, value: selectedissue };
      setSelectedissue(newIssue);
    }
  };

  const handleOpgChange = (index, value) => {
    setOPGs(prevOPGs => {
      const updatedOPGs = [...prevOPGs];

      // Si el índice supera la longitud actual de OPGs, llenar con valores vacíos
      if (index >= updatedOPGs.length) {
        updatedOPGs.push(...Array(index - updatedOPGs.length + 1).fill(''));
      }

      updatedOPGs[index] = value; // Asignar el valor al índice proporcionado
      return updatedOPGs; // Devolver el nuevo arreglo actualizado de OPGs
    });
  };

  const handleDependenciaChange = (index, value) => {

    setDependenciesarray(prevdependenciesarray => {
      const updateddependenciesarray = [...prevdependenciesarray];

      if (index >= updateddependenciesarray.length) {
        updateddependenciesarray.push(...Array(index - updateddependenciesarray.length + 1).fill(''));
      }

      updateddependenciesarray[index] = value;
      return updateddependenciesarray;
    });
  };

  const handleRemoveButtonClick = () => {
    setSections(prevSections => {
      const updatedSections = [...prevSections];
      updatedSections.pop(); // Elimina el último elemento
      return updatedSections;
    });
  };

  const [alignment, setAlignment] = React.useState('left');
  const [formats, setFormats] = React.useState(() => []);
  const [textareaContent, setTextareaContent] = useState('');
  const [textarealegal, setTextarealegal] = useState('');
  const [textareaObs, setTextareaObs] = useState('');

  const handleFormat = (event, newFormats) => {
    setFormats(newFormats);
  };

  const handleAlignment = (event, newAlignment) => {
    setAlignment(newAlignment);
  };

  const Alert = React.forwardRef(function Alert(props, ref) {
    return <MuiAlert elevation={6} ref={ref} variant="filled" {...props} />;
  });

  const deleteLabel = (arraytoDelete) => {
    const cantidadElementos = arraytoDelete.length;
    let contador = 0;
    let contenidoObjeto = [];
    console.log(`El array dependenciesarray tiene ${cantidadElementos} elementos:`);

    if (cantidadElementos > 0) {
      console.log('Elementos:');
      arraytoDelete.forEach((element, index) => {
        if (typeof element === 'object' && element !== null && element.hasOwnProperty('label')) {
          console.log(`[${index + 1}] Objeto: ${JSON.stringify(element)}`);

          const { label } = element;
          const nombre = label.replace(/.*?"/g, ''); // Eliminar todo antes de las comillas dobles
          contenidoObjeto[contador] = nombre;
        } else {
          console.log(`[${index + 1}] ${element}`);
          contenidoObjeto[contador] = element;
        }
        contador++;
      });

      console.log("Array: ", contenidoObjeto);
    } else {
      console.log('El array dependenciesarray está vacío.');
    }
    return contenidoObjeto;
  };

  const handleErrorSnackbarClose = (event, reason) => {
    if (reason === 'clickaway') {
      return;
    }
    setErrorSnackbarOpen(false);
  };

  const openDialog = () => {
    setOpenDialog(true);
  };

  const handleCloseDialog = () => {
    setOpenDialog(false);
  };

  const handleSendData = () => {

    const newIssue = selectedissue ? { label: selectedissue.label, value: selectedissue.value } : null;
    setSelectedissue(newIssue);

    const filteresdependenciesarray = deleteLabel(dependenciesarray);

    const newData = {
      folio: folioValue,
      date: selectedDate ? selectedDate.toISOString() : null,
      issue: typeof selectedissue === 'object' ? selectedissue.label : selectedissue,
      name: nameValue,
      docNumber: OPGs,
      institution: filteresdependenciesarray,
      description: textareaContent,
      legalBasis: textarealegal,
      notes: textareaObs,
      time: timeValue,
    };

    axios.post('http://localhost:3000/data', newData)
      .then(response => {
        console.log('Respuesta del servidor:', response.data);
        openDialog();
        navigate(`/datadisplay`);
      })
      .catch(error => {
        console.error('Error al enviar los datos:', error);
        if (error.response && error.response.data && error.response.data.message === 'El número de documento ya existe') {
          setErrorSnackbarMessage('El número de documento ya existe');
          setErrorSnackbarOpen(true);
        } else {
          setErrorSnackbarOpen(true);
        }
      });
  };

  // --------   principal   -------
  return (
    <div className="container">
      <ThemeProvider theme={customTheme(outerTheme)}>
        <div>
          <div className="title">
            <h1>Formulario de registro</h1>
          </div>

          <Grid container className='grid' >
            <Grid item>
              <TextField
                id="outlined-basic"
                label="Folio"
                variant="outlined"
                value={folioValue}
                onChange={(e) => setFolioValue(e.target.value)}
              />
            </Grid>
            <Grid item>
              <TextField
                id="outlined-basic"
                label="Hora"
                variant="outlined"
                value={timeValue}
                onChange={(e) => settimeValue(e.target.value)} />
            </Grid>
            <Grid item>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <DemoContainer components={['DatePicker']}>
                  <DatePicker
                    label="Fecha (MM/DD/AAAA)"
                    value={selectedDate}
                    onChange={(newValue) => setSelectedDate(newValue)}
                    renderInput={(params) => <TextField {...params} />}
                  />
                </DemoContainer>
              </LocalizationProvider>
            </Grid>
            <Grid item>
              <Autocomplete
                disablePortal
                id="combo-box-demo"
                options={temas}
                freeSolo
                sx={{ width: 300 }}
                renderInput={(params) => <TextField {...params} label="Tema" />}
                onChange={(event, newValue) => {
                  setSelectedissue(newValue);
                }}
                onKeyDown={(event) => {
                  if (event.key === 'Enter') {
                    handleConfirmIssue(); // Confirmar el valor al presionar "Enter"
                  }
                }}
              />
            </Grid>
          </Grid>
        </div>

        <div className="container-name">
          <TextField id="outlined-basic"
            label="Nombre y/o cargo"
            variant="filled"
            style={{ width: "150vh" }}
            value={nameValue}
            onChange={(e) => setNameValue(e.target.value)}
            spellCheck="true"
          />
        </div>

        {sections.map((section, index) => (
          <React.Fragment key={index}>
            {React.cloneElement(section)}
          </React.Fragment>
        ))}

        <div className="container-issue">
          <Typography variant="h6" style={{ color: '#691C32', marginLeft: '20px' }}>
            Asunto:
          </Typography>
          <div style={{ display: 'flex', justifyContent: 'center' }}>
            <Paper
              elevation={0}
              sx={{
                display: 'flex',
                border: (theme) => `1px solid ${theme.palette.divider}`,
                flexWrap: 'wrap',
                maxWidth: '500px',
              }}
            >
              <StyledToggleButtonGroup className="toggle-group"
                size="small"
                value={alignment}
                exclusive
                onChange={handleAlignment}
                aria-label="text alignment"
              >
                <ToggleButton value="left" aria-label="left aligned">
                  <FormatAlignLeftIcon />
                </ToggleButton>
                <ToggleButton value="center" aria-label="centered">
                  <FormatAlignCenterIcon />
                </ToggleButton>
                <ToggleButton value="right" aria-label="right aligned">
                  <FormatAlignRightIcon />
                </ToggleButton>
                <ToggleButton value="justify" aria-label="justified" disabled>
                  <FormatAlignJustifyIcon />
                </ToggleButton>
              </StyledToggleButtonGroup>
              <Divider flexItem orientation="vertical" sx={{ mx: 0.5, my: 1 }} />
              <StyledToggleButtonGroup
                size="small"
                value={formats}
                onChange={handleFormat}
                aria-label="text formatting"
              >
                <ToggleButton value="bold" aria-label="bold">
                  <FormatBoldIcon />
                </ToggleButton>
                <ToggleButton value="italic" aria-label="italic">
                  <FormatItalicIcon />
                </ToggleButton>
                <ToggleButton value="underlined" aria-label="underlined">
                  <FormatUnderlinedIcon />
                </ToggleButton>
                <ToggleButton value="color" aria-label="color" disabled>
                  <FormatColorFillIcon />
                  <ArrowDropDownIcon />
                </ToggleButton>
              </StyledToggleButtonGroup>
            </Paper>
          </div>

          <TextareaAutosize
            value={textareaContent}
            onChange={(e) => setTextareaContent(e.target.value)}
            style={{
              width: '95%',
              minHeight: '150px',
              border: '5px solid #ccc',
              borderRadius: '4px',
              padding: '8px',
              marginTop: '10px',
              marginLeft: '10px',
              fontStyle: formats.includes('italic') ? 'italic' : 'normal',
              fontWeight: formats.includes('bold') ? 'bold' : 'normal',
              textDecoration: formats.includes('underlined') ? 'underline' : 'none',
              textAlign: alignment,
            }}
          />
        </div>


        <div className="accordion-container" style={{ marginTop: '20px' }}>
          <Accordion style={{ backgroundColor: '#D6D1C4' }}>
            <AccordionSummary
              expandIcon={<ExpandMoreIcon />}
              aria-controls="panel1a-content"
              id="panel1a-header"
            >
              <Typography style={{ color: '#691C32' }}>Fundamento Jurídico</Typography>
            </AccordionSummary>
            <AccordionDetails>
              <TextareaAutosize
                value={textarealegal}
                onChange={(e) => setTextarealegal(e.target.value)}
                style={{
                  width: '95%',
                  minHeight: '150px',
                  border: '5px solid #ccc',
                  borderRadius: '4px',
                  padding: '8px',
                  marginTop: '10px',

                }}
              />
            </AccordionDetails>
          </Accordion>
        </div>

        <div className="accordion-container" style={{ marginTop: '20px' }}>
          <Accordion style={{ backgroundColor: '#D6D1C4' }}>
            <AccordionSummary
              expandIcon={<ExpandMoreIcon />}
              aria-controls="panel1a-content"
              id="panel1a-header"
            >
              <Typography className="observaciones-text">Observaciones</Typography>
            </AccordionSummary>
            <AccordionDetails>
              <TextareaAutosize
                value={textareaObs}
                onChange={(e) => setTextareaObs(e.target.value)}
                style={{
                  width: '95%',
                  minHeight: '150px',
                  border: '5px solid #ccc',
                  borderRadius: '4px',
                  padding: '8px',
                  marginTop: '10px',
                }}
              />
            </AccordionDetails>
          </Accordion>
        </div>

        <div className="container-datasend" style={{ marginTop: '20px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between' }}>
            <Button variant="contained" color="success" onClick={handleSendData}>
              Enviar
            </Button>
            <Button variant="outlined" startIcon={<DeleteIcon />}>
              Eliminar
            </Button>
          </div>
        </div>
      </ThemeProvider>

      <div className="snackbar">
        <Snackbar
          open={errorSnackbarOpen}
          autoHideDuration={6000}
          onClose={handleErrorSnackbarClose}
          anchorOrigin={{
            vertical: 'bottom',
            horizontal: 'left',
          }}
        >
          <Alert onClose={handleErrorSnackbarClose} severity="error">
            Error al enviar los datos
          </Alert>
        </Snackbar>

        <Dialog

          onClose={handleCloseDialog}
          aria-labelledby="alert-dialog-title"
          aria-describedby="alert-dialog-description"
        >
          <DialogTitle id="alert-dialog-title">
            {"Envío de datos"}
          </DialogTitle>
          <DialogContent>
            <DialogContentText id="alert-dialog-description">
              Elementos agregados correctamente a la base de datos.
            </DialogContentText>
          </DialogContent>
          <DialogActions>
            <Button onClick={handleCloseDialog} autoFocus>
              Aceptar
            </Button>
          </DialogActions>
        </Dialog>
      </div>
    </div>
  );
};

export default Data;
